

[http_service]
  internal_port = 3080
  force_https = true
  auto_stop_machines = false
  auto_start_machines = true

[env]
  ##########################
  # Server configuration: 
  ##########################

  # The server will listen to localhost:3080 by default. You can change the target IP as you want. 
  # If you want to make this server available externally, for example to share the server with others 
  # or expose this from a Docker container, set host to 0.0.0.0 or your external IP interface. 
  # Tips: Setting host to 0.0.0.0 means listening on all interfaces. It's not a real IP.  
  # Use localhost:port rather than 0.0.0.0:port to access the server. 
  # Set Node env to development if running in dev mode.
  APP_TITLE="LibreChat"
  HOST="0.0.0.0"
  PORT="3080"

  # Change this to proxy any API request. 
  # It's useful if your machine has difficulty calling the original API server. 
  # PROXY=

  # Change this to your MongoDB URI if different. I recommend appending LibreChat. 
  #MONGO_URI=mongodb://127.0.0.1:27017/LibreChat

  ##########################
  # OpenAI Endpoint: 
  ##########################

  # Access key from OpenAI platform. 
  # Leave it blank to disable this feature.
  # Set to "user_provided" to allow the user to provide their API key from the UI.
  #OPENAI_API_KEY=sk-free-api

  # Identify the available models, separated by commas *without spaces*. 
  # The first will be default. 
  # Leave it blank to use internal settings. 
  OPENAI_MODELS="gpt-3.5-turbo,gpt-3.5-turbo-16k,gpt-3.5-turbo-0613,gpt-3.5-turbo-16k-0613,gpt-4,gpt-4-32k,gpt-claude-2-100k,gpt-google"

  # Reverse proxy settings for OpenAI: 
  # https://github.com/waylaidwanderer/node-chatgpt-api#using-a-reverse-proxy 
  OPENAI_REVERSE_PROXY="https://freeapi.aivvm.com/v1/chat/completions/"

  ##########################
  # AZURE Endpoint:   
  ##########################

  # To use Azure with this project, set the following variables. These will be used to build the API URL.
  # Chat completion: 
  # `https://{AZURE_OPENAI_API_INSTANCE_NAME}.openai.azure.com/openai/deployments/{AZURE_OPENAI_API_DEPLOYMENT_NAME}/chat/completions?api-version={AZURE_OPENAI_API_VERSION}`;
  # You should also consider changing the `OPENAI_MODELS` variable above to the models available in your instance/deployment.
  # Note: I've noticed that the Azure API is much faster than the OpenAI API, so the streaming looks almost instantaneous.
  # Note "AZURE_OPENAI_API_COMPLETIONS_DEPLOYMENT_NAME" and "AZURE_OPENAI_API_EMBEDDINGS_DEPLOYMENT_NAME" are optional but might be used in the future

  # AZURE_OPENAI_API_KEY=
  # AZURE_OPENAI_API_INSTANCE_NAME=
  # AZURE_OPENAI_API_DEPLOYMENT_NAME=
  # AZURE_OPENAI_API_VERSION=
  # AZURE_OPENAI_API_COMPLETIONS_DEPLOYMENT_NAME=
  # AZURE_OPENAI_API_EMBEDDINGS_DEPLOYMENT_NAME=

  ##########################
  # BingAI Endpoint:   
  ##########################

  # Also used for Sydney and jailbreak
  # To get your Access token for Bing, login to https://www.bing.com
  # Use dev tools or an extension while logged into the site to copy the content of the _U cookie. 
  #If this fails, follow these instructions https://github.com/danny-avila/LibreChat/issues/370#issuecomment-1560382302 to provide the full cookie strings.
  # Set to "user_provided" to allow the user to provide its token from the UI.
  # Leave it blank to disable this endpoint. 
  BINGAI_TOKEN="_EDGE_V=1;MUID=089AD52A4C476B5E3D73C6494D276AAD;MUIDB=089AD52A4C476B5E3D73C6494D276AAD;SRCHD=AF=NOFORM;SRCHUID=V=2&GUID=FA721A193141490B831D4BBFC5716836&dmnchg=1;_UR=QS=0&TQS=0;SNRHOP=I=&TS=;ipv6=hit=1691136419985&t=6;MicrosoftApplicationsTelemetryDeviceId=a8daf79e-2e35-47e7-bb6c-e053dd2f574f;CSRFCookie=e7b6bd2b-83dd-4f9a-a0d4-bbfab45fe2a6;_EDGE_S=SID=08EAE7DD20AA6F741653F4BE21F86E70;ANON=A=922F9C9128395AD3DD479DA8FFFFFFFF&E=1ca7&W=1;NAP=V=1.9&E=1c4d&C=bq9EPsL_t1GXcNPsLK6O4RtZ9mOBzr3y4NGeqBpnbcTWZWrISnd2yA&W=1;PPLState=1;KievRPSSecAuth=FABSBBRaTOJILtFsMkpLVWSG6AN6C/svRwNmAAAEgAAACCQTviv4BltKEARe+zF7UoisMAp2yNrR18Aif+s7xqTzSbNS/KRTgb1wnOi2E4u9WfRUcxmk6QaBICD77plG2iHL1Hhzid9ziGsENn28/ourV5fweKqyr02n4Zs/7j98/scoqSsoTqQIPaoI+bjuCLb8dE3/qPzpXuj9NZxqI3MBZVqnsxKedZteeWvbxY+vC+zFZdiLgkVIwKA75toRe/InO/nb05P8qVcvOdnLdjTPCm8hy7cH4tXnDkICLAA4W1Ypm3LUnfELh9tjL6qU0CmVVa8j444CbF4p41YPnjyz2BQFNM+H5O3HQbC+z3jjwVfgy8FGrzSozfjUAaEF7Fh9YgqAkYqz9KubldTPf/sDkh7IVBDviQT7aoUkLIgSzFeOaNBXBIIEDJkxebWLXHWOlpFuL9515RRVRI0N9VmrizIYD0Lfcb5yOhAr2tmahhGkSAlSCiHkllac4cLz86kOWN058INkZvIWp8MeQzYQTXnNTXpUnZT9/huuCROwitV43bmp6j9gtSIZbV9DyKLqjpYLZIfzusu4YB5i3LLihpwRHYS1ngoVVNWzQgxQkt2IcUlx4KLEn0oBDmxOYrCs/+DylD4ZLUKcuYSzyqU2hT5hkj0ZI/T8VnNniXeVZprDNYOZTQ1u78kP4i5FZPpWhgBp/WampUFUn3nSv5BlYaeMTUuUCDaRiIAGvmd13sfUzDR8E/DwrENLnGcb9br2uaaF3LRdDLzrAya4mWhxy47C6fLYD00Xbv2R+ZwpoASF4gWXAhzb+p9ZEwJrFC25q73k8aGNnDe29M8mfCxfaLdVvkAqonkL6wcp//xurHHzLk7GOJP4//xNT3d7yb5ChtZLgCVX8v0aXRm6MCYGqpphzQbJFLq6NnBXau3HC+5P4fglajG5LMmg/M50tcfxaJfmv/C9xTYh1pqr51yA603/6EPnt3ZT2MRSzZSNFJIbyQeYS63hRj7NU1wlYwWdW6s+j7VRKx+wHOonmClA7rAc/wPM8wElrnKM4NKfRrd4fcd+zFk+ukeMCqh6NlbBtgAdtQSj/pZmdpMoVUopuHGnPSxcaf85W9L7PYgZrHDtL8oHFcuDp0VDSptrj+M1BENF34GGPOfHPGCaTghe2ZedLFDQuMHUSq1kzfTtwdzMDcoV79bOqa1JjN5MQYh0OCak0VTTqS7kgapUS2o39t8+DUpMHtmjEynuYhAGLkZu59K6TPnTbZgNUTRPUD08kgNir8LuoO8i7/zEhXYX1n7toyFrvbHeYexgeFPGQdakMLI+oRGQmIhfFYMi1V4baikl7VF5XwwopiM1FMsEhjHrHizL8lhu0QHG5dYvvJX7fdR9QvGF75GmhB83PuLU+eyBFjkzIUPUjkzTpNMSLF9YZrwo/nLcRRQAghNVLPiGU4c9F3lUQ8TxSBmStWo=;_U=1Rg7g4B5rEH_NSW86Bj2GAGYZeL5x9N4Y6NtRn55TShkJkLfRmDm7lGA15-XrL-OKL8biF1anpAH0Wk8ELxMCAlfQ5ybMvYtHyIRfo61OiEYOflqgRI2DUq591X3ExKKqPCeCf9yxjLY-G9v1SbS3Zwx4R2N5s6V67nHd7s4wZvH21uvloEmps-9ckYJN2VHcHsp5cil8pX_Fd-hhLwwlfA;WLS=C=e3e89ba54892391e&N=eu;WLID=M63Ujs0kuBS8PyZYYIMgHzWkGm6saG0Z2/U/WtQokran6InybPzGAqBmsGnIyHCeOOBcqbvU1QyeWwDIj+TqM06Wm2EDUGAu1dc5WzSju6o=;SUID=A;FP=u=d;SnrOvr=X=rebateson;_HPVN=CS=eyJQbiI6eyJDbiI6MSwiU3QiOjAsIlFzIjowLCJQcm9kIjoiUCJ9LCJTYyI6eyJDbiI6MSwiU3QiOjAsIlFzIjowLCJQcm9kIjoiSCJ9LCJReiI6eyJDbiI6MSwiU3QiOjAsIlFzIjowLCJQcm9kIjoiVCJ9LCJBcCI6dHJ1ZSwiTXV0ZSI6dHJ1ZSwiTGFkIjoiMjAyMy0wOC0wNFQwMDowMDowMFoiLCJJb3RkIjowLCJHd2IiOjAsIkRmdCI6bnVsbCwiTXZzIjowLCJGbHQiOjAsIkltcCI6NH0=;_SS=SID=1DC3319C2F1465621FBC22FF2E746472&R=18&RB=18&GB=0&RG=0&RP=18&OCID=MY0291;USRLOC=HS=1&ELOC=LAT=24.47079849243164|LON=118.16805267333984|N=GZ,GD|ELT=1|;SRCHUSR=DOB=20230804&T=1691137073000&POEX=W;_RwBf=r=1&mta=0&rc=18&rb=18&gb=0&rg=0&pc=18&mtu=0&rbb=0.0&g=0&cid=&clo=0&v=4&l=2023-08-04T07:00:00.0000000Z&lft=0001-01-01T00:00:00.0000000&aof=0&o=0&p=BINGCOPILOTWAITLIST&c=true&t=7700&s=2023-04-13T06:59:00.0557734+00:00&ts=2023-08-04T08:17:58.0189245+00:00&rwred=0&wls=2&lka=0&lkt=0&TH=&dci=0&e=gdYCOUFvS5mDFcC3OfhFrhQbP9C-4eX2O0M2buiJyUECTJlyWuE-7QlEgGgKB3OeP_O5QYajrYCOGD3HZ7teneKLoP6TomymU-sjR1iUs-U&A=922F9C9128395AD3DD479DA8FFFFFFFF;dsc=order=News;SRCHHPGUSR=SRCHLANG=zh-Hans&PV=0.1.0&BRW=NOTP&BRH=M&CW=838&CH=755&SCW=1164&SCH=4262&DPR=1.3&UTC=480&DM=0&WTS=63826729607&HV=1691137083&PRVCW=838&PRVCH=755&IG=55E4A418883E4AED9CED5BA17821EE24&EXLTT=2"

  # BingAI Host: 
  # Necessary for some people in different countries, e.g. China (https://cn.bing.com) 
  # Leave it blank to use default server. 
  # BINGAI_HOST=https://cn.bing.com 

  ##########################
  # ChatGPT Endpoint: 
  ##########################

  # ChatGPT Browser Client (free but use at your own risk) 
  # Access token from https://chat.openai.com/api/auth/session 
  # Exposes your access token to `CHATGPT_REVERSE_PROXY`
  # Set to "user_provided" to allow the user to provide its token from the UI.
  # Leave it blank to disable this endpoint 
  CHATGPT_TOKEN=""

  # Identify the available models, separated by commas. The first will be default. 
  # Leave it blank to use internal settings. 
  #CHATGPT_MODELS=text-davinci-002-render-sha,gpt-4
  # NOTE: you can add gpt-4-plugins, gpt-4-code-interpreter, and gpt-4-browsing to the list above and use the models for these features;
  # however, the view/display portion of these features are not supported, but you can use the underlying models, which have higher token context
  # Also: text-davinci-002-render-paid is deprecated as of May 2023

  # Reverse proxy setting for OpenAI
  # https://github.com/waylaidwanderer/node-chatgpt-api#using-a-reverse-proxy
  # By default it will use the node-chatgpt-api recommended proxy, (it's a third party server)
  # CHATGPT_REVERSE_PROXY=<YOUR REVERSE PROXY>

  #############################
  # Plugins:
  #############################

  # Identify the available models, separated by commas *without spaces*. 
  # The first will be default. 
  # Leave it blank to use internal settings. 
  PLUGIN_MODELS="gpt-3.5-turbo,gpt-3.5-turbo-16k,gpt-3.5-turbo-0613,gpt-3.5-turbo-16k-0613,gpt-4,gpt-4-32k,gpt-claude-2-100k"

  # For securely storing credentials, you need a fixed key and IV. You can set them here for prod and dev environments
  # If you don't set them, the app will crash on startup.
  # You need a 32-byte key (64 characters in hex) and 16-byte IV (32 characters in hex)
  # Use this replit to generate some quickly: https://replit.com/@daavila/crypto#index.js
  # Here are some examples (THESE ARE NOT SECURE!)
  #CREDS_KEY=f34be427ebb29de8d88c107a71546019685ed8b241d8f2ed00c3df97ad2566f0
  #CREDS_IV=e2341419ec3dd3d19b13a1a87fafcbfb


  # AI-Assisted Google Search  
  # This bot supports searching google for answers to your questions with assistance from GPT! 
  # See detailed instructions here: https://github.com/danny-avila/chatgpt-clone/blob/main/docs/features/plugins/google_search.md
  #GOOGLE_API_KEY=
  GOOGLE_CSE_ID="628a17e16ed6c4805"

  # StableDiffusion WebUI
  # This bot supports StableDiffusion WebUI, using it's API to generated requested images.
  SD_WEBUI_URL="http://0.0.0.0:7860"

  ##########################
  # PaLM (Google) Endpoint: 
  ##########################

  # Follow the instruction here to setup:
  # https://github.com/danny-avila/LibreChat/blob/main/docs/install/apis_and_tokens.md

  #PALM_KEY="user_provided"

  # In case you need a reverse proxy for this endpoint:
  # GOOGLE_REVERSE_PROXY= 

  ##########################
  # Proxy: To be Used by all endpoints
  ##########################

  PROXY=""

  ##########################
  # Search: 
  ##########################

  # ENABLING SEARCH MESSAGES/CONVOS 
  # Requires the installation of the free self-hosted Meilisearch or a paid Remote Plan (Remote not tested) 
  # The easiest setup for this is through docker-compose, which takes care of it for you. 
  SEARCH=true

  # REQUIRED FOR SEARCH: MeiliSearch Host, mainly for the API server to connect to the search server. 
  # Replace '0.0.0.0' with 'meilisearch' if serving MeiliSearch with docker-compose. 
  MEILI_HOST="https://ms-a74ee973dbee-3122.sgp.meilisearch.io"

  # REQUIRED FOR SEARCH: MeiliSearch HTTP Address, mainly for docker-compose to expose the search server. 
  # Replace '0.0.0.0' with 'meilisearch' if serving MeiliSearch with docker-compose. 
  MEILI_HTTP_ADDR="ms-a74ee973dbee-3122.sgp.meilisearch.io"

  # REQUIRED FOR SEARCH: In production env., a secure key is needed. You can generate your own. 
  # This master key must be at least 16 bytes, composed of valid UTF-8 characters. 
  # MeiliSearch will throw an error and refuse to launch if no master key is provided, 
  # or if it is under 16 bytes. MeiliSearch will suggest a secure autogenerated master key.
  # Using docker, it seems recognized as production so use a secure key.
  # This is a ready made secure key for docker-compose, you can replace it with your own.
  #MEILI_MASTER_KEY=DrhYf7zENyR6AlUCKmnz0eYASOQdl6zxH7s7MKFSfFCt

  ##########################
  # User System:
  ##########################

  ALLOW_REGISTRATION=false

  # JWT Secrets
  #JWT_SECRET=secret
  JWT_REFRESH_SECRET=""

  # Google:
  # Add your Google Client ID and Secret here, you must register an app with Google Cloud to get these values
  # https://cloud.google.com/
  GOOGLE_CLIENT_ID=""
  GOOGLE_CLIENT_SECRET=""
  GOOGLE_CALLBACK_URL="/oauth/google/callback"

  # Set the expiration delay for the secure cookie with the JWT token
  # Delay is in millisecond e.g. 7 days is 1000*60*60*24*7
  SESSION_EXPIRY=15552000000
  #"(1000 * 60 * 60 * 24) * 180"

  ###########################
  # Application Domains
  ###########################

  # Note: server = backend, client = public (the client is the url you visit)
  # For the google login to work in dev mode, you will likely need to change DOMAIN_SERVER to localhost:3090 or place it in .env.development

  #DOMAIN_CLIENT=http://localhost:3080
  #DOMAIN_SERVER=http://localhost:3080

