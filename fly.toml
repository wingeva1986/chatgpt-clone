

[http_service]
  internal_port = 3080
  force_https = true
  auto_stop_machines = false
  auto_start_machines = true

[env]
  ##########################
  # Server configuration: 
  ##########################

  # The server will listen to localhost:3080 by default. You can change the target IP as you want. 
  # If you want to make this server available externally, for example to share the server with others 
  # or expose this from a Docker container, set host to 0.0.0.0 or your external IP interface. 
  # Tips: Setting host to 0.0.0.0 means listening on all interfaces. It's not a real IP.  
  # Use localhost:port rather than 0.0.0.0:port to access the server. 
  # Set Node env to development if running in dev mode.
  APP_TITLE="LibreChat"
  HOST="0.0.0.0"
  PORT="3080"

  # Change this to proxy any API request. 
  # It's useful if your machine has difficulty calling the original API server. 
  # PROXY=

  # Change this to your MongoDB URI if different. I recommend appending LibreChat. 
  #MONGO_URI=mongodb://127.0.0.1:27017/LibreChat

  ##########################
  # OpenAI Endpoint: 
  ##########################

  # Access key from OpenAI platform. 
  # Leave it blank to disable this feature.
  # Set to "user_provided" to allow the user to provide their API key from the UI.
  #OPENAI_API_KEY=sk-free-api

  # Identify the available models, separated by commas *without spaces*. 
  # The first will be default. 
  # Leave it blank to use internal settings. 
  OPENAI_MODELS="gpt-3.5-turbo,gpt-3.5-turbo-16k,gpt-3.5-turbo-0613,gpt-3.5-turbo-16k-0613,gpt-4,gpt-4-32k,gpt-claude-2-100k,gpt-google"

  # Reverse proxy settings for OpenAI: 
  # https://github.com/waylaidwanderer/node-chatgpt-api#using-a-reverse-proxy 
  OPENAI_REVERSE_PROXY="https://freeapi.aivvm.com/v1/chat/completions/"

  ##########################
  # AZURE Endpoint:   
  ##########################

  # To use Azure with this project, set the following variables. These will be used to build the API URL.
  # Chat completion: 
  # `https://{AZURE_OPENAI_API_INSTANCE_NAME}.openai.azure.com/openai/deployments/{AZURE_OPENAI_API_DEPLOYMENT_NAME}/chat/completions?api-version={AZURE_OPENAI_API_VERSION}`;
  # You should also consider changing the `OPENAI_MODELS` variable above to the models available in your instance/deployment.
  # Note: I've noticed that the Azure API is much faster than the OpenAI API, so the streaming looks almost instantaneous.
  # Note "AZURE_OPENAI_API_COMPLETIONS_DEPLOYMENT_NAME" and "AZURE_OPENAI_API_EMBEDDINGS_DEPLOYMENT_NAME" are optional but might be used in the future

  # AZURE_OPENAI_API_KEY=
  # AZURE_OPENAI_API_INSTANCE_NAME=
  # AZURE_OPENAI_API_DEPLOYMENT_NAME=
  # AZURE_OPENAI_API_VERSION=
  # AZURE_OPENAI_API_COMPLETIONS_DEPLOYMENT_NAME=
  # AZURE_OPENAI_API_EMBEDDINGS_DEPLOYMENT_NAME=

  ##########################
  # BingAI Endpoint:   
  ##########################

  # Also used for Sydney and jailbreak
  # To get your Access token for Bing, login to https://www.bing.com
  # Use dev tools or an extension while logged into the site to copy the content of the _U cookie. 
  #If this fails, follow these instructions https://github.com/danny-avila/LibreChat/issues/370#issuecomment-1560382302 to provide the full cookie strings.
  # Set to "user_provided" to allow the user to provide its token from the UI.
  # Leave it blank to disable this endpoint. 
  BINGAI_TOKEN="MUID=28D89183C92A684133AA9ED3C855695C; SRCHD=AF=NOFORM; SRCHUID=V=2&GUID=BAD211CD367B4E7D9866CB2F3628F9E1&dmnchg=1; _UR=QS=0&TQS=0; MUIDB=28D89183C92A684133AA9ED3C855695C; ANON=A=7760D7C6C49FE6AB52ACE844FFFFFFFF&E=1c43&W=1; MicrosoftApplicationsTelemetryDeviceId=6f226537-8c65-4996-b75b-7b919bc18878; PPLState=1; _BINGNEWS=SW=1349&SH=625; USRLOC=HS=1&ELOC=LAT=35.69339370727539|LON=139.70838928222656|N=Shinjuku-Ku，东京都|ELT=6|; _EDGE_CD=m=en-gb; BCP=AD=1&AL=1&SM=1; GI_FRE_COOKIE=gi_prompt=1; SUID=A; _Rwho=u=d; _SS=SID=1A3F64716D6069D11D4777036CB968C5&R=15&RB=15&GB=0&RG=0&RP=15; CSRFCookie=d3c542fb-1ac6-4f20-956f-b410add1fdd6; SRCHUSR=DOB=20201202&T=1692447741000&TPC=1691303395000&POEX=W; ipv6=hit=1692451344781&t=6; NAP=V=1.9&E=1c49&C=3tZp1kjze0F290ILfwOMrF7mEw24d8k8YOeFOOYrCG85AgdoDSC6dA&W=1; KievRPSSecAuth=FABKBBRaTOJILtFsMkpLVWSG6AN6C/svRwNmAAAEgAAACH5Gv+mRDvsSCAQlLDWhUcapWnHaMGe++iT64OgN4unwszSQLERZNnQ/W9SZWdIxJ8HgujwDPHUz3PoYf6I5YDIVFSRdG8aOzL42bHum5TbjRwSv1GOXy3cgb7zHZ0RrqbzQ5Rp/Az1CUt/H85rBEeJcHkezRe6KcciYrFhfOidBWIwYEKsIeMVFXHX6mVAjpA720dGc+5KRNXBsyGRAn/WS4MxeccgiBIEjc4/1Y0Hkz3Z6Vfv5EaV+9XIdtPVQIAzTeAzUMddKuQnfBE8M91nhzi74jOtNoyj84r4bsLM8iCPZhPABcv2CfMHc8bIaTmYQqFn5wkt51ZxkJ6xuQG+i8VsMvSCeJbWxR1b6lHAC2y5EXqovoWkBdaFTCLYKM0kKuTtN4KzDC62is0Nk/NQPKyQKCM2E/8WX+scETFFq32iaGC1G0UBmp8N2unGW0LP8/mSaV1vNJ+PPJyEsc18xud32JTwm7Vp/yr5J99NFh+KH9YbopU/PRDcNRRC7N9nVpwUne7/JHVKgmWkd8PMx1nRnRE56fRdsWuAvt/rBJvW+4/FY4uJQjhxoUmpDpSByHkodFvQnvTUQ/uye4l3fTqhEwDKH32mXYjou1KUT2ODXvVItgt/zTlEOUecf9q/QBlOIbIHMXrRWad34DVuFUPzVXB991lbEln+xhWm7wfn6Pl7CDWo3smrky9kutwnOWI0v+CarRgRXrnu1ZMUhS4sw4hOiA+yfXUmFm2xawyI4+I8FkqrEBdDzTh+EeLfjUsxVrXFNf8xr5tnZT7rD4re5uAqfjtGP/vqwgrCEhdfoo5gHaFQaRpb8QqfhoTZ76ock7mmc7fkuZ1h55Moj4s5g9xxFk9j94iT/Tpx+Rjbb7sI608PyoEmBWJphuRal/OUGRKgIdSMqkNkYwhpCn3s1gag0UOzX7m/iKuxw63QDbgL9T5Iw7DiFH7w+ijjcYbH6dqW6FTwWqLTXDpS8rJlKXNDvMzHRYOQ/NRWo6z1c89QV3uLyt5avv5U6gwmzInOQEApPR0qcxH4l5RYfxTA5lN/uauctCFg26B/W3mrotL7zC8laddKwvLPFuZg5HR2iy6AhmqzmmPQNqZUFG+fQ5rQpqNuJbbAWRi3Is8BNpcnmwwqCYR6kEedf+JCmOqAXBTgAXFY7JEYHazibHY8a/Sb3RTHTmCJztHAPUz1t8FRt+cTYdYBIXzx7n3HNfnwRtRpJF9X5Qjyr5iEZ9R6vITLGxlnHUN7K0mAV249UACcsnUYofZ09q0rD4xSHnMmoeWxD8ifCPgc6Ysc9i/Xv5lI7h5nQkVCaqgNLDaelWjgf4MVmJiBMsNrnJBN6DLooI8QsEzkq/PIay4D3WFvRQJnBwXA92TTUeF9oTAAUAIYysZgLV+DMeUfKn6FQKSOrKMeG; _U=14LboWcePv8RwsozTTYd-YEnuGU_fu3dX2lCkgXEPKhtKfEjDfT0lzcrOoijDcVk8kaSPgMRXnmnEUgiQ_dT7M5aK4h-HA4vb7chhgDbhmOBBWKkiVM1RMMFUBoFB4ISPkynlsiRXKE2sCjvvpulfCpUfQRF3ZiDxgAyrXXvXArWjawJy1UOlkfyEwG3t0NLulkiz69MQPAFC5mPdqjVRhA; WLS=C=719680b143317278&N=he; WLID=wc9atJImK0QPSVqKWTTuDcgfXFtpWWQmY0Xe0HKO0+9ADzjiyEzL9AXv4iTIka1oPfH66k47DSmCAUIoHkpvWG534bmv65N6z62yD4rK7wo=; _EDGE_S=SID=1A3F64716D6069D11D4777036CB968C5&mkt=en-gb; _RwBf=ilt=1&ihpd=1&ispd=0&rc=15&rb=15&gb=0&rg=0&pc=15&mtu=0&rbb=0.0&g=0&cid=&clo=0&v=2&l=2023-08-19T07:00:00.0000000Z&lft=0001-01-01T00:00:00.0000000&aof=0&o=0&p=bingcopilotwaitlist&c=MY00IA&t=5762&s=2023-04-09T12:58:29.9827956+00:00&ts=2023-08-19T12:22:38.3644834+00:00&rwred=0&wls=2&lka=0&lkt=0&TH=&mta=0&e=WQUIi7Aj3S2dF6BQfYFOru8jX-KchryHGWhJd_9mlOYEQaJ63AdT1IGy-WnhEHsDJnAxXwRPKyd_OO1Q8s0qNw&A=7760D7C6C49FE6AB52ACE844FFFFFFFF&dci=0&wlb=0; _HPVN=CS=eyJQbiI6eyJDbiI6MiwiU3QiOjAsIlFzIjowLCJQcm9kIjoiUCJ9LCJTYyI6eyJDbiI6MiwiU3QiOjAsIlFzIjowLCJQcm9kIjoiSCJ9LCJReiI6eyJDbiI6MiwiU3QiOjAsIlFzIjowLCJQcm9kIjoiVCJ9LCJBcCI6dHJ1ZSwiTXV0ZSI6dHJ1ZSwiTGFkIjoiMjAyMy0wOC0xOVQwMDowMDowMFoiLCJJb3RkIjowLCJHd2IiOjAsIkRmdCI6bnVsbCwiTXZzIjowLCJGbHQiOjAsIkltcCI6N30=; SRCHHPGUSR=CW=855&CH=625&DPR=1.0&UTC=480&DM=0&HV=1692447760&WTS=63828044541&BRW=NOTP&BRH=S&SRCHLANGV2=zh-Hans&SRCHLANG=zh-Hans&PRVCW=1366&PRVCH=625&SCW=838&SCH=625&PV=0.1.0&IG=581F9448E5A14E318086A104EF4F5885; ai_session=Qt9c4DSfHUrE9XKsTNveZm|1692447749027|1692447766554"
  # BingAI Host: 
  # Necessary for some people in different countries, e.g. China (https://cn.bing.com) 
  # Leave it blank to use default server. 
  # BINGAI_HOST=https://cn.bing.com 

  ##########################
  # ChatGPT Endpoint: 
  ##########################

  # ChatGPT Browser Client (free but use at your own risk) 
  # Access token from https://chat.openai.com/api/auth/session 
  # Exposes your access token to `CHATGPT_REVERSE_PROXY`
  # Set to "user_provided" to allow the user to provide its token from the UI.
  # Leave it blank to disable this endpoint 
  CHATGPT_TOKEN=""

  # Identify the available models, separated by commas. The first will be default. 
  # Leave it blank to use internal settings. 
  #CHATGPT_MODELS=text-davinci-002-render-sha,gpt-4
  # NOTE: you can add gpt-4-plugins, gpt-4-code-interpreter, and gpt-4-browsing to the list above and use the models for these features;
  # however, the view/display portion of these features are not supported, but you can use the underlying models, which have higher token context
  # Also: text-davinci-002-render-paid is deprecated as of May 2023

  # Reverse proxy setting for OpenAI
  # https://github.com/waylaidwanderer/node-chatgpt-api#using-a-reverse-proxy
  # By default it will use the node-chatgpt-api recommended proxy, (it's a third party server)
  # CHATGPT_REVERSE_PROXY=<YOUR REVERSE PROXY>

  #############################
  # Plugins:
  #############################

  # Identify the available models, separated by commas *without spaces*. 
  # The first will be default. 
  # Leave it blank to use internal settings. 
  PLUGIN_MODELS="gpt-3.5-turbo,gpt-3.5-turbo-16k,gpt-3.5-turbo-0613,gpt-3.5-turbo-16k-0613,gpt-4,gpt-4-32k,gpt-claude-2-100k"

  # For securely storing credentials, you need a fixed key and IV. You can set them here for prod and dev environments
  # If you don't set them, the app will crash on startup.
  # You need a 32-byte key (64 characters in hex) and 16-byte IV (32 characters in hex)
  # Use this replit to generate some quickly: https://replit.com/@daavila/crypto#index.js
  # Here are some examples (THESE ARE NOT SECURE!)
  #CREDS_KEY=f34be427ebb29de8d88c107a71546019685ed8b241d8f2ed00c3df97ad2566f0
  #CREDS_IV=e2341419ec3dd3d19b13a1a87fafcbfb


  # AI-Assisted Google Search  
  # This bot supports searching google for answers to your questions with assistance from GPT! 
  # See detailed instructions here: https://github.com/danny-avila/chatgpt-clone/blob/main/docs/features/plugins/google_search.md
  #GOOGLE_API_KEY=
  GOOGLE_CSE_ID="628a17e16ed6c4805"

  # StableDiffusion WebUI
  # This bot supports StableDiffusion WebUI, using it's API to generated requested images.
  SD_WEBUI_URL="http://0.0.0.0:7860"

  ##########################
  # PaLM (Google) Endpoint: 
  ##########################

  # Follow the instruction here to setup:
  # https://github.com/danny-avila/LibreChat/blob/main/docs/install/apis_and_tokens.md

  #PALM_KEY="user_provided"

  # In case you need a reverse proxy for this endpoint:
  # GOOGLE_REVERSE_PROXY= 

  ##########################
  # Proxy: To be Used by all endpoints
  ##########################

  PROXY=""

  ##########################
  # Search: 
  ##########################

  # ENABLING SEARCH MESSAGES/CONVOS 
  # Requires the installation of the free self-hosted Meilisearch or a paid Remote Plan (Remote not tested) 
  # The easiest setup for this is through docker-compose, which takes care of it for you. 
  SEARCH=false

  # REQUIRED FOR SEARCH: MeiliSearch Host, mainly for the API server to connect to the search server. 
  # Replace '0.0.0.0' with 'meilisearch' if serving MeiliSearch with docker-compose. 
  #MEILI_HOST="https://ms-a74ee973dbee-3122.sgp.meilisearch.io"

  # REQUIRED FOR SEARCH: MeiliSearch HTTP Address, mainly for docker-compose to expose the search server. 
  # Replace '0.0.0.0' with 'meilisearch' if serving MeiliSearch with docker-compose. 
  #MEILI_HTTP_ADDR="ms-a74ee973dbee-3122.sgp.meilisearch.io"

  # REQUIRED FOR SEARCH: In production env., a secure key is needed. You can generate your own. 
  # This master key must be at least 16 bytes, composed of valid UTF-8 characters. 
  # MeiliSearch will throw an error and refuse to launch if no master key is provided, 
  # or if it is under 16 bytes. MeiliSearch will suggest a secure autogenerated master key.
  # Using docker, it seems recognized as production so use a secure key.
  # This is a ready made secure key for docker-compose, you can replace it with your own.
  #MEILI_MASTER_KEY=DrhYf7zENyR6AlUCKmnz0eYASOQdl6zxH7s7MKFSfFCt

  ##########################
  # User System:
  ##########################

  ALLOW_REGISTRATION=false

  # JWT Secrets
  #JWT_SECRET=secret
  JWT_REFRESH_SECRET=""

  # Google:
  # Add your Google Client ID and Secret here, you must register an app with Google Cloud to get these values
  # https://cloud.google.com/
  GOOGLE_CLIENT_ID=""
  GOOGLE_CLIENT_SECRET=""
  GOOGLE_CALLBACK_URL="/oauth/google/callback"

  # Set the expiration delay for the secure cookie with the JWT token
  # Delay is in millisecond e.g. 7 days is 1000*60*60*24*7
  SESSION_EXPIRY=15552000000
  #"(1000 * 60 * 60 * 24) * 180"

  ###########################
  # Application Domains
  ###########################

  # Note: server = backend, client = public (the client is the url you visit)
  # For the google login to work in dev mode, you will likely need to change DOMAIN_SERVER to localhost:3090 or place it in .env.development

  #DOMAIN_CLIENT=http://localhost:3080
  #DOMAIN_SERVER=http://localhost:3080

