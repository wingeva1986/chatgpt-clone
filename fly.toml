primary_region = "hkg"

[http_service]
  internal_port = 3080
  force_https = true
  auto_stop_machines = false
  auto_start_machines = true

[env]
  ##########################
  # Server configuration: 
  ##########################

  # The server will listen to localhost:3080 by default. You can change the target IP as you want. 
  # If you want to make this server available externally, for example to share the server with others 
  # or expose this from a Docker container, set host to 0.0.0.0 or your external IP interface. 
  # Tips: Setting host to 0.0.0.0 means listening on all interfaces. It's not a real IP.  
  # Use localhost:port rather than 0.0.0.0:port to access the server. 
  # Set Node env to development if running in dev mode.
  APP_TITLE="LibreChat"
  HOST="0.0.0.0"
  PORT="3080"

  # Change this to proxy any API request. 
  # It's useful if your machine has difficulty calling the original API server. 
  # PROXY=

  # Change this to your MongoDB URI if different. I recommend appending LibreChat. 
  #MONGO_URI=mongodb://127.0.0.1:27017/LibreChat

  ##########################
  # OpenAI Endpoint: 
  ##########################

  # Access key from OpenAI platform. 
  # Leave it blank to disable this feature.
  # Set to "user_provided" to allow the user to provide their API key from the UI.
  #OPENAI_API_KEY=sk-free-api

  # Identify the available models, separated by commas *without spaces*. 
  # The first will be default. 
  # Leave it blank to use internal settings. 
  OPENAI_MODELS="gpt-3.5-turbo,gpt-3.5-i,gpt-web,gpt-perplexity,gpt-claude-2-100k,gpt-google,stablediffusionxl,gpt-3.5-turbo-16k,gpt-4,gpt-4-32k"

  # Titling is enabled by default when initiating a conversation.
  # Uncomment the following variable to disable this feature.
  # TITLE_CONVO=false
  
  # The model used for titling by default is gpt-3.5-turbo-0613 to assure it works with the default method.
  # gpt-3.5-turbo should also work when using the official API (and not a reverse proxy).
  # You can change the model used by uncommenting the following and setting it to the model you want
  # Must be compatible with the OpenAI Endpoint.
  OPENAI_TITLE_MODEL="gpt-3.5-turbo"
  
  # Reverse proxy settings for OpenAI: 
  # https://github.com/waylaidwanderer/node-chatgpt-api#using-a-reverse-proxy 
  OPENAI_REVERSE_PROXY="https://poebr.fly.dev/v2/driver/sage/v1/chat/completions"#"https://freeapi.aivvm.com/v1/chat/completions/"

  ##########################
  # AZURE Endpoint:   
  ##########################

  # To use Azure with this project, set the following variables. These will be used to build the API URL.
  # Chat completion: 
  # `https://{AZURE_OPENAI_API_INSTANCE_NAME}.openai.azure.com/openai/deployments/{AZURE_OPENAI_API_DEPLOYMENT_NAME}/chat/completions?api-version={AZURE_OPENAI_API_VERSION}`;
  # You should also consider changing the `OPENAI_MODELS` variable above to the models available in your instance/deployment.
  # Note: I've noticed that the Azure API is much faster than the OpenAI API, so the streaming looks almost instantaneous.
  # Note "AZURE_OPENAI_API_COMPLETIONS_DEPLOYMENT_NAME" and "AZURE_OPENAI_API_EMBEDDINGS_DEPLOYMENT_NAME" are optional but might be used in the future

  # AZURE_OPENAI_API_KEY=
  # AZURE_OPENAI_API_INSTANCE_NAME=
  # AZURE_OPENAI_API_DEPLOYMENT_NAME=
  # AZURE_OPENAI_API_VERSION=
  # AZURE_OPENAI_API_COMPLETIONS_DEPLOYMENT_NAME=
  # AZURE_OPENAI_API_EMBEDDINGS_DEPLOYMENT_NAME=

  ##########################
  # BingAI Endpoint:   
  ##########################

  # Also used for Sydney and jailbreak
  # To get your Access token for Bing, login to https://www.bing.com
  # Use dev tools or an extension while logged into the site to copy the content of the _U cookie. 
  #If this fails, follow these instructions https://github.com/danny-avila/LibreChat/issues/370#issuecomment-1560382302 to provide the full cookie strings.
  # Set to "user_provided" to allow the user to provide its token from the UI.
  # Leave it blank to disable this endpoint. 
  BINGAI_TOKEN="MUID=11024F7A8FCB6D2620C35C5A8BCB6BDE; MUIDB=11024F7A8FCB6D2620C35C5A8BCB6BDE; SRCHD=AF=NOFORM; SRCHUID=V=2&GUID=BDD78DFA971343E5B425299E0BA04F5B&dmnchg=1; ANON=A=922F9C9128395AD3DD479DA8FFFFFFFF&E=1c92&W=1; NAP=V=1.9&E=1c38&C=K40Y_hnGNSQHx-GuiVegx-cBWHVPEDE4QdVQ0ksR_Hj5WATJFDg2aQ&W=1; PPLState=1; MicrosoftApplicationsTelemetryDeviceId=a58ebef3-6ba9-4539-8a96-d5f88507f4e3; SnrOvr=X=rebateson; SUID=A; _UR=QS=0&TQS=0&cdxcls=0; _HPVN=CS=eyJQbiI6eyJDbiI6NywiU3QiOjAsIlFzIjowLCJQcm9kIjoiUCJ9LCJTYyI6eyJDbiI6NywiU3QiOjAsIlFzIjowLCJQcm9kIjoiSCJ9LCJReiI6eyJDbiI6NywiU3QiOjAsIlFzIjowLCJQcm9kIjoiVCJ9LCJBcCI6dHJ1ZSwiTXV0ZSI6dHJ1ZSwiTGFkIjoiMjAyMy0wOS0xNFQwMDowMDowMFoiLCJJb3RkIjowLCJHd2IiOjAsIkRmdCI6bnVsbCwiTXZzIjowLCJGbHQiOjAsIkltcCI6MTZ9; _Rwho=u=d; ipv6=hit=1694658901790&t=6; ai_session=2wlY05NRWahrkwGqAnW0Rf|1694655302768|1694655302768; KievRPSSecAuth=FABSBBRaTOJILtFsMkpLVWSG6AN6C/svRwNmAAAEgAAACMFKCZh8u8TfEAQg0CVIg0/ch6llgfc75HvV1dcR89qnhrfh2LqGvB/UtSphO/oNgViWGK0FxANv+88RdFTGxViE49UJuMWoEkg5WLUrTTSDkOw68tSFneng6GCr8V080P1ag105k+n6vQw+JsKS6/ptisiSIrVniUYldcYh6IuhLwTGrwcxdi+5Z0t7nsfdQMjsN3no0hq3vg8/eyrbf+YyR6TmcWdIQYDq49hEO/rJCpszwtYR38ns8cSNzEHI5fJGUoRobDmM0utldpBUWeZCirVkdAN80T6h8e1jPLlDZlFB1mwaXq7fj6msj8OkjIiiiUUd7q7FCBG9FKNx/YN4dLPFx035fJlP7XK//nVtMdZh50LFIzg/oCsYrjmS0RB4axufxF9QhzbIG7MVDonx4sCA6C2kW4kNMxE1BVBFqaG4/pea/tCDEpGWw4QndfRH6Kh0xJh+bkuO35gU77gI+PajlYlTMmTnT8WWCxClzNqivIFgkaGJVHMVylyriIAHNiGRQBpbJnfNko+NdTZqB1Vk+MuSBhzFSr/zOTxxyFXdEjIM3uGmCNlX+3FeUGw2inWhdSsNPQwmBhq8tMs3RidlSU3EWftVhjA5JuxN0T2Qn0tAEfNG2gj4Bx5wB7ZtZ9furRlUX5xq8J9rphQV6Zz9H7alYvp1ResP+CY5JS2/q2DfkBv96J6PTMdnRq4aNU7MiT+j8bany24tdyuWTBM8NLjpPl1PEHZu4cPS/+uCmj30IOffsGcc4eyeopDiJoe970voGuu4GWrpqJCMGQ97wlqUkX7KZKUnYsCzsTkjFNMTxOS9UOMwGVFZdQu/HwlSbYyH1j61tDiDPgRAN2eyfKB9S13NlG/53JVCPIu0kJarMhfiFheplGHwGM426PIGmOGPoII2zLNRlAf9yhuk45c7tOAy/cj2466/vg+8CTWbhzJXiQX4m0IQQPGNlzelGnzlimV8JPjIPRzl0MobwMAtEi9c8L0uQIJWXRK2LwvSBLStm/meBaR/7E7LFjiOjyYglSGEmC1VKD6M2Glhc/cA31mOECbXU+XdD98LgYgIhNnGtj0uwXKwrps48Cgp0NIaRJTYgiC2MnqWz+6L2IE/AfcFA2eSy7FTqkq1vZzj2lxzX4+hOt2F6ADzTn4sm96ZVSdSFExs4HfYDo8V9xR3lU+df6kSR205izo7JZpAEgRUDKlBQ1eD3zK3I1UEBkLQeIf0M1wJFVZIh0a2/jUPx1MkhXYhjvECjpNFvoesYK/f4OB/vdrLrdRnVBHBLjVbzRg8FaL/us0oPSUnuJ6ivh2p27KIw1HIvAWcoi37+zu8mAl+rcczPzm5erggAuUNuAQxoBdru+1uglV1eKHSaluxzvOGbIpR+uj71cZMOMRbUBQAUPAuZpPrCxC059wS/ZKRROid3sw=; _U=1ZFNZig531_vZV34R0dwpx4wfqG78RE3vUcFp2q4_WNxSLSkH8PzAmvGmt0f5JAxv1WALMIx5bhpbfaz4EXmIqUV8q__eU6t4i3vgN7--ZCZIsbUGV-qz8IwD8iweqdTUshg8E5F50acz7VfD-LIiGzVNsptzYXRlP4IFVa5jPJ_Ox8ERjGy-7kQW8K984kSJyYCW8Q_4soVjSM79WWdaKw; WLS=C=e3e89ba54892391e&N=eu; WLID=M63Ujs0kuBS8PyZYYIMgHzWkGm6saG0Z2/U/WtQokran6InybPzGAqBmsGnIyHCeOOBcqbvU1QyeWwDIj+TqM06Wm2EDUGAu1dc5WzSju6o=; _EDGE_S=SID=2E7D8C25EC85643807D99FA9ED8D65E7&mkt=zh-hk; USRLOC=HS=1&ELOC=LAT=23.155345916748047|LON=113.24415588378906|N=yuexiu,guangdong|ELT=1|; _SS=SID=2E7D8C25EC85643807D99FA9ED8D65E7&R=35&RB=35&GB=0&RG=0&RP=32; _RwBf=ilt=1&ihpd=1&ispd=0&rc=35&rb=35&gb=0&rg=0&pc=32&mtu=0&rbb=0.0&g=0&cid=&clo=0&v=2&l=2023-09-13T07:00:00.0000000Z&lft=0001-01-01T00:00:00.0000000&aof=0&o=0&p=BINGCOPILOTWAITLIST&c=true&t=7700&s=2023-04-13T06:59:00.0557734+00:00&ts=2023-09-14T01:35:08.3527085+00:00&rwred=0&wls=2&lka=0&lkt=0&TH=&dci=0&mta=0&e=gdYCOUFvS5mDFcC3OfhFrhQbP9C-4eX2O0M2buiJyUECTJlyWuE-7QlEgGgKB3OeP_O5QYajrYCOGD3HZ7teneKLoP6TomymU-sjR1iUs-U&A=922F9C9128395AD3DD479DA8FFFFFFFF&r=1&wlb=0; SRCHUSR=DOB=20230720&T=1694655296000&TPC=1694655313000&POEX=W; SRCHHPGUSR=SRCHLANG=zh-Hans&IG=CAE73FBF6B09496C90692E2562B78F11&BRW=NOTP&BRH=S&CW=604&CH=698&SCW=604&SCH=112&DPR=1.3&UTC=480&DM=0&PV=0.1.0&HV=1694655313&WTS=63830252096&PRVCW=1536&PRVCH=698"
  # BingAI Host: 
  # Necessary for some people in different countries, e.g. China (https://cn.bing.com) 
  # Leave it blank to use default server. 
  # BINGAI_HOST=https://cn.bing.com 

  ##########################
  # ChatGPT Endpoint: 
  ##########################

  # ChatGPT Browser Client (free but use at your own risk) 
  # Access token from https://chat.openai.com/api/auth/session 
  # Exposes your access token to `CHATGPT_REVERSE_PROXY`
  # Set to "user_provided" to allow the user to provide its token from the UI.
  # Leave it blank to disable this endpoint 
  CHATGPT_TOKEN=""

  # Identify the available models, separated by commas. The first will be default. 
  # Leave it blank to use internal settings. 
  #CHATGPT_MODELS=text-davinci-002-render-sha,gpt-4
  # NOTE: you can add gpt-4-plugins, gpt-4-code-interpreter, and gpt-4-browsing to the list above and use the models for these features;
  # however, the view/display portion of these features are not supported, but you can use the underlying models, which have higher token context
  # Also: text-davinci-002-render-paid is deprecated as of May 2023

  # Reverse proxy setting for OpenAI
  # https://github.com/waylaidwanderer/node-chatgpt-api#using-a-reverse-proxy
  # By default it will use the node-chatgpt-api recommended proxy, (it's a third party server)
  # CHATGPT_REVERSE_PROXY=<YOUR REVERSE PROXY>

  #############################
  # Plugins:
  #############################

  # Identify the available models, separated by commas *without spaces*. 
  # The first will be default. 
  # Leave it blank to use internal settings. 
  PLUGIN_MODELS="gpt-3.5-i,gpt-3.5-turbo,gpt-4,gpt-claude-2-100k"

  # For securely storing credentials, you need a fixed key and IV. You can set them here for prod and dev environments
  # If you don't set them, the app will crash on startup.
  # You need a 32-byte key (64 characters in hex) and 16-byte IV (32 characters in hex)
  # Use this replit to generate some quickly: https://replit.com/@daavila/crypto#index.js
  # Here are some examples (THESE ARE NOT SECURE!)
  #CREDS_KEY=f34be427ebb29de8d88c107a71546019685ed8b241d8f2ed00c3df97ad2566f0
  #CREDS_IV=e2341419ec3dd3d19b13a1a87fafcbfb


  # AI-Assisted Google Search  
  # This bot supports searching google for answers to your questions with assistance from GPT! 
  # See detailed instructions here: https://github.com/danny-avila/chatgpt-clone/blob/main/docs/features/plugins/google_search.md
  #GOOGLE_API_KEY=
  GOOGLE_CSE_ID="628a17e16ed6c4805"

  # StableDiffusion WebUI
  # This bot supports StableDiffusion WebUI, using it's API to generated requested images.
  SD_WEBUI_URL="http://0.0.0.0:7860"

  ##########################
  # PaLM (Google) Endpoint: 
  ##########################

  # Follow the instruction here to setup:
  # https://github.com/danny-avila/LibreChat/blob/main/docs/install/apis_and_tokens.md

  #PALM_KEY="user_provided"

  # In case you need a reverse proxy for this endpoint:
  # GOOGLE_REVERSE_PROXY= 

  ##########################
  # Proxy: To be Used by all endpoints
  ##########################

  PROXY=""

  ##########################
  # Search: 
  ##########################

  # ENABLING SEARCH MESSAGES/CONVOS 
  # Requires the installation of the free self-hosted Meilisearch or a paid Remote Plan (Remote not tested) 
  # The easiest setup for this is through docker-compose, which takes care of it for you. 
  SEARCH=true
  MEILI_NO_ANALYTICS=true

  # REQUIRED FOR SEARCH: MeiliSearch Host, mainly for the API server to connect to the search server. 
  # Replace '0.0.0.0' with 'meilisearch' if serving MeiliSearch with docker-compose. 
  MEILI_HOST="https://meili-x8ux.onrender.com"

  # REQUIRED FOR SEARCH: MeiliSearch HTTP Address, mainly for docker-compose to expose the search server. 
  # Replace '0.0.0.0' with 'meilisearch' if serving MeiliSearch with docker-compose. 
  MEILI_HTTP_ADDR="meilisearch:7700"

  # REQUIRED FOR SEARCH: In production env., a secure key is needed. You can generate your own. 
  # This master key must be at least 16 bytes, composed of valid UTF-8 characters. 
  # MeiliSearch will throw an error and refuse to launch if no master key is provided, 
  # or if it is under 16 bytes. MeiliSearch will suggest a secure autogenerated master key.
  # Using docker, it seems recognized as production so use a secure key.
  # This is a ready made secure key for docker-compose, you can replace it with your own.
  MEILI_MASTER_KEY="DrhYf7zENyR6AlUCKmnz0eYASOQdl6zxH7s7MKFSfFCt"

  ##########################
  # User System:
  ##########################

  ALLOW_REGISTRATION=false

  # JWT Secrets
  #JWT_SECRET=secret
  JWT_REFRESH_SECRET="flykey@2023"

  # Google:
  # Add your Google Client ID and Secret here, you must register an app with Google Cloud to get these values
  # https://cloud.google.com/
  GOOGLE_CLIENT_ID=""
  GOOGLE_CLIENT_SECRET=""
  GOOGLE_CALLBACK_URL="/oauth/google/callback"

  # Set the expiration delay for the secure cookie with the JWT token
  # Delay is in millisecond e.g. 7 days is 1000*60*60*24*7
  SESSION_EXPIRY=15552000000
  #"(1000 * 60 * 60 * 24) * 180"
  REFRESH_TOKEN_EXPIRY=15552000000

  ###########################
  # Application Domains
  ###########################

  # Note: server = backend, client = public (the client is the url you visit)
  # For the google login to work in dev mode, you will likely need to change DOMAIN_SERVER to localhost:3090 or place it in .env.development

  #DOMAIN_CLIENT=http://localhost:3080
  #DOMAIN_SERVER=http://localhost:3080

